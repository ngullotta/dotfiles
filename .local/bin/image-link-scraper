#!/usr/bin/env python
import logging
from argparse import ArgumentParser
from enum import Enum
from pathlib import Path
from re import IGNORECASE, findall, DOTALL
from urllib.parse import urlparse
from urllib.request import urlopen


class RegexPattern(Enum):
    ENCLOSED = r"<img\s+[^>]*src=\"([^\"]*)\"[^>]*>"
    BARE = r"https?://\S+\.(?:jpe?g|png|gif)"


parser = ArgumentParser(
    description="""
    Get all image urls from a URI. This can either be a link to a 
    webpage or a local path. This uses only standard python builtins.

    When scraped images are relative it will attempt to re-attach it to
    the base url netloc (when given webpage links)
    """
)
parser.add_argument(
    "uri",
    type=str,
    help="A URI to a webpage or local file (can also just be a path)",
)
parser.add_argument(
    "-l",
    "--level",
    type=logging.getLogger().setLevel,
    help="Log level [DEBUG|INFO|ERROR...]",
)


def parse_body_image_urls(
    body: str,
    pattern: RegexPattern = RegexPattern.ENCLOSED,
    flags=(IGNORECASE | DOTALL),
):
    return findall(pattern.value, body, flags)


if __name__ == "__main__":
    args = parser.parse_args()
    base = urlparse(args.uri)
    logging.debug(base)

    # This is a local path, or at least we will parse it as such
    if base.scheme in ["file", ""]:
        path = Path(url.path)
        if not path.exists():
            logging.error("Could not locate local resource along %s", path)
            exit(1)
        with open(path) as fp:
            images = parse_body_image_urls(
                fp.read(), pattern=RegexPattern.BARE
            )
            for image in map(lambda s: urlparse(s), images):
                logging.debug(image)
                print(image.geturl())

    # This is a URL of some kind
    if base.scheme in ["http", "https"]:
        with urlopen(args.uri) as f:
            body = f.read().decode("utf-8")
            images = parse_body_image_urls(body)
            for image in map(lambda s: urlparse(s), images):
                logging.debug(image)
                if not image.netloc:
                    image = image._replace(netloc=base.netloc)
                if not image.scheme:
                    image = image._replace(scheme=base.scheme)
                print(image.geturl())
